# encoding: utf-8
require "digest/md5"

srand(4711)

FactoryGirl.define do
  sequence :unit_name do |n|
    "Business Unit #{n}"
  end

  sequence :ugid do |n|
    "u1" + Digest::MD5.hexdigest(n.to_s).slice(0, 6)
  end

  sequence :email do |n|
    "test-#{n}@example.com"
  end

  sequence :type_name do |n|
    "Produkttyp #{n}"
  end

  sequence :post_name do |n|
    "BP#{n}"
  end

  sequence :item_name do |n|
    "blubb #{n}"
  end

  factory :business_unit do
    transient do
      bu_name           { generate :unit_name }
    end
    name { bu_name }
    email
    short_name { "BU#{id}" }
    description { "blubb" }
    active { true }
    mage_number { 1 }
    mage_default_series { "C" }
  end

  factory :product_type do
    name                { "product type #{generate :type_name}" }
    description         { "autogenerated testing product type" }
    mage_account_number { 4019 }
  end

  factory :person do
    login "blame"
    first_name "Martin"
    last_name "Frost"
    email
    ugid { generate :ugid }

    Person::ROLES.each do |p_role|
      factory p_role.to_sym do
        role { p_role }
      end
    end
  end

  factory :purchase do |n|
    description   { "test purchase #{n}" }
    slug          { "test" }
    purchased_on  { Date.today }
    year          { Time.now.year }
    person
    budget_post

    transient do
      item_count { 1 }
    end

    factory :purchase_with_items do
      after(:build) do |purchase, evaluator|
        evaluator.item_count.times do |i|
          purchase.items.new(
            comment: "item ##{i}",
            amount: 17,
            product_type: create(:product_type)
          )
        end
      end
    end

    factory :confirmed_purchase do
      workflow_state "confirmed"
    end
  end

  factory :purchase_item do
    comment   { generate :item_name }
    amount    { 17.0 }
    purchase
    product_type
  end

  factory :budget_post do
    name                    { generate :post_name }
    mage_arrangement_number { 0 }
    business_unit
  end

  factory :budget_row do
    budget_post
    year        { Time.now.year }
    sum         { 0 }
  end
end
